"##############
"### VUNDLE ###
"##############

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'jelera/vim-javascript-syntax'
Plugin 'pangloss/vim-javascript'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
"Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
"Plugin 'user/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"###############
"### MY CONF ###
"###############

set guifont=Consolas:h11:cEASTEUROPE

" Set widht of the tabs
"set tabstop=4
"set shiftwidth=4

" Universal tab settings
set softtabstop=0
set smarttab

" Specific tab setting (when you press tab you get 4 spaces, all
" actual tabs are displayed as 8 spaces)
set tabstop=8 
set shiftwidth=2 
set expandtab

" Show line numbers
set number

" Use syntax highlighting
syntax on

" Set colors
set background=dark
"set t_Co=256
colorscheme darkblue

" Automaticaly ident when writing code
set autoindent
set smartindent

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" set mouse mode
set mouse=a

" Treat long lines as break lines (useful when moving around in
" them)
map j gj
map k gk

" Do not highlight mattching parentheses
let loaded_matchparen = 1

" Turn backup off, since most stuff is in SVN, git et.c
" anyway...
set nobackup
set nowb
set noswapfile

" Configure backspace so it acts as it should act
set backspace=indent,eol,start
"set whichwrap+=<,>,h,l

" So that esc, O works faster
set timeout timeoutlen=1000 ttimeoutlen=0

" Disable automatic comment insertion
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Set line rewraping to 64 columns
set tw=64
" Disable automatic line rewraping
set fo-=t
" Disable screen width from overriding tw when being narrower
" then tw
set wm=0

" Correct the spelling mistakes highlighting (otherwise it can
" happen to be red on red
hi SpellBad ctermfg=000 ctermbg=001 

" Set lines to break on whitespaces
"set linebreak

" Mouse inside tmux in tty TEST
"set ttymouse=xterm

"#################
"### SHORTCUTS ###
"#################

" Remap VIM 0 to first non-blank character
map 0 ^

nmap <F6> mz:execute TabToggle()<CR>'z

" F7 to switch to light background
nmap <F7> :highlight Normal ctermfg=black ctermbg=grey<CR>

" F8 to toggle spell checking
map <F8> :setlocal spell! spelllang=en_us<CR>

" F9 to toggle line numbers
nmap <F9> :set invnumber<CR>

" F10 to toggle paste mode
map <F10> :set invpaste<CR>
set pastetoggle=<F10>

" F11, F12  go to next/previous tab
map <F11> gT<CR>
map <F12> gt<CR>

set fo-=t

"#################
"### FUNCTIONS ###
"#################

" A function that enables custom identation for python scripts.
" For it to work, there has to be this line: SetupPython, in
" file named: ~/.vim/after/ftplugin/python.vim
function! SetupPython()
  " Here, you can have the final say on what is set.  So
  " fixup any settings you don't like.
  setlocal softtabstop=0
  setlocal smarttab
  setlocal tabstop=4 
  setlocal shiftwidth=4 
  setlocal expandtab
endfunction
command! -bar SetupPython call SetupPython()

" Toggles bettween different identation/tab settings.
function TabToggle()
  if &expandtab
    " When you press tab you get tab, all tabs are dispaled
    " as 4 spaces.
    set tabstop=4 
    set shiftwidth=4
    set noexpandtab 
  else
    " When you press tab you get 4 spaces, all actual tabs
    " are displayed as 8 spaces.
    set tabstop=8 
    set shiftwidth=2 
    set expandtab
  endif
endfunction
